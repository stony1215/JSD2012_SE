V6此版本开始完成响应客户端一个页面的操作
通过这个版本我们要了解两个知识点:
1:页面的构成,HTML基础语法
2:HTTP响应内容

首先创建一个页面
实现:1:在项目目录下新建一个目录webapps
这个目录用于存放当前服务端所有部署的网络应用,每个网络应用一个独立的子目录放在webapps下
并且子目录的名字就是该网络应用的名字(tomcat也是这样管理的)
2:在webapps下新建一个子目录:myweb,作为我们 第一个网络应用(网站内容)
3:在myweb下新建首页:index.html

然后在ClientHandler中将一个页面以标准的HTTP响应格式发送给浏览器
实现:在ClientHandler第三步响应客户端环节,先将固定的一个页面webapps/myweb/index/html
发送给浏览器去显示.


V7首先完成一个工作,可以根据浏览器地址栏中通过改变抽象路径部分请求到服务端webapps下对应网络应用中的
某个页面
思路:浏览器地址栏输入的路径如:http://localhost:8088/myweb/index.html
其中/myweb/index.html部分会体现在请求的请求行中的uri部分,即抽象路径部分
而这部分我们已经在之前的版本中通过解析请求保存在了httprequest的uri属性上了
因此clienthandler可以在解析请求后通过获取httprequest中这个属性的值,在实例化file对象时在webapps
目录下通过uri的值定位到这个文件,从而将该页面响应给浏览器

实现:1,先在httprequest中提供属性对应的get方法,以便外界可以获取到这些信息
2,在clienthandler处理请求的环节根据httprequest获取的抽象路径部分(uri属性的值)来定位webapps下得文件
3,利用上个版本发送响应的代码将这个页面发送回去
这样一来,浏览器就可以通过改变地址栏中的抽象路径部分,请求服务端不同的页面了

测试:在浏览器输入下列地址,可以分别访问到对应页面
http://localhost:8088/myweb/index.html
http://localhost:8088/myblog/hello.html

上述操作完成后,会出现一个新情况:如果地址栏中抽象路径输入的地址在webapps下没有对应的文件是,
服务端在读取该File表示的文件就会抛出异常,但实际上,当浏览器输入的抽象路径没有对应资源时,这就是典型的应当
返回404状态码的情况了
因此我们要完成响应404的操作.
实现:
1:在webapps下新建一个子目录root
 这个目录存放所有共用的页面,比如404页面,无论用户将来请求哪个网络应用下得资源都可能出现该资源不存在的情况
2:在root下新建页面:404.html
  该页面居中显示一行字:404,资源不存在!
3:在ClientHandler处理请求的环节，当根据抽象路径去webapps下定义资源后(实例化File对象)，添加分支
  如果该资源存在则响应，如果该资源不存在，则响应404.
  404的响应要做几个变化:
  3.1:状态代码要改为404,状态描述改为NotFound
  3.2:响应头Content-Length的长度是404页面的长度
  3.3:响应正文发送的应当是404.html这个页面内容